{"version":3,"sources":["components/Day.js","components/Forecast.js","components/Info.js","components/SelectCity.js","App.js","index.js","assets/sun.svg"],"names":["Day","props","dayName","icon","desc","temp","press","className","src","alt","Forecast","useState","dailyForecast","setDailyForecast","useEffect","forecast","days","indexOfDay","indexOf","day","dailyWeather","daily","map","length","key","dt","weather","description","pressure","createWeatherBlocks","sunset","Info","hours","sunrise","hoursFull","Math","floor","minutes","today","Date","toLocaleDateString","toLocaleTimeString","city","hour","sun","SelectCity","handleClickCitySelect","e","selectCity","target","id","onClick","getLocalWeather","class","APIKey","App","state","data","lon","lat","currentTime","cityPending","onClickSelectCity","infoWrapper","document","querySelector","forecastWrapper","console","log","setState","classList","add","getWeather","API","fetch","then","response","ok","Error","json","remove","current","getGeolocation","pos","coords","latitude","longitude","navigator","geolocation","getCurrentPosition","getCurrentTime","getCurrentDay","getDay","calculateSunPosition","sunContainer","horizon","moon","dayLength","sunPositionX","clientWidth","sunPositionY","clientHeight","finalX","finalY","style","left","top","display","backgroundColor","infoSelector","this","setInterval","addEventListener","hide","onClickHide","React","Component","ReactDOM","render","getElementById","module","exports"],"mappings":"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","file":"static/js/main.597af7dd.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Day = (props) => {\r\n  const { dayName, icon, desc, temp, press } = props;\r\n  return (\r\n    <div className=\"daily-forecast\">\r\n      <p className=\"day-name\">{dayName}</p>\r\n      <img\r\n        className=\"icon\"\r\n        src={`http://openweathermap.org/img/wn/${icon}.png`}\r\n        alt=\"alt\"\r\n      />\r\n      <p className=\"day-description\">{desc}</p>\r\n\r\n      <p className=\"day-temperature\">{temp}&#176;C</p>\r\n      <p className=\"day-pressure\">{press} hPa</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Day;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Day from \"./Day\";\r\n\r\nconst Forecast = (props) => {\r\n  const [dailyForecast, setDailyForecast] = useState();\r\n  const createWeatherBlocks = () => {\r\n    if (props.forecast) {\r\n      const days = [\r\n        \"Niedziela\",\r\n        \"Poniedziałek\",\r\n        \"Wtorek\",\r\n        \"Środa\",\r\n        \"Czwartek\",\r\n        \"Piątek\",\r\n        \"Sobota\",\r\n      ];\r\n      let indexOfDay = days.indexOf(props.day) - 1;\r\n      const dailyWeather = props.forecast.daily.map((day) => {\r\n        if (indexOfDay === days.length - 1) {\r\n          indexOfDay = 0;\r\n        } else indexOfDay++;\r\n        return (\r\n          <Day\r\n            key={day.dt}\r\n            dayName={days[indexOfDay]}\r\n            icon={day.weather[0].icon}\r\n            desc={day.weather[0].description}\r\n            temp={day.temp.day}\r\n            press={day.pressure}\r\n          ></Day>\r\n        );\r\n      });\r\n      setDailyForecast(dailyWeather);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    createWeatherBlocks();\r\n  }, [props.sunset]);\r\n  useEffect(() => {}, []);\r\n  return (\r\n    <div className=\"forecast\">\r\n      <div className=\"forecast-container\">{dailyForecast}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Forecast;\r\n","import React from \"react\";\r\nimport sun from \"../assets/sun.svg\";\r\nconst Info = (props) => {\r\n  const hours = (props.sunset - props.sunrise) / 3600;\r\n  const hoursFull = Math.floor((props.sunset - props.sunrise) / 3600);\r\n  const minutes = Math.floor((hours - hoursFull) * 60);\r\n  const today = new Date().toLocaleDateString();\r\n  const sunrise = new Date(props.sunrise * 1000).toLocaleTimeString();\r\n  const sunset = new Date(props.sunset * 1000).toLocaleTimeString();\r\n\r\n  return (\r\n    <div className=\"info\">\r\n      <div className=\"info-wrapper\">\r\n        <h1 className=\"info-city\">{props.city}</h1>\r\n        <p className=\"info-day\">{props.day}</p>\r\n        <p className=\"info-clock\"> {props.hour}</p>\r\n        <p className=\"info-date\">{today}</p>\r\n        <p className=\"info-sunrise\">Wschód słońca: {sunrise}</p>\r\n        <p className=\"info-sunset\">Zachód słońca: {sunset}</p>\r\n        <p className=\"info-day-length\">\r\n          Długość dnia: {hoursFull} godzin i {minutes} minut.\r\n        </p>\r\n      </div>\r\n      <div className=\"sun-container\">\r\n        <img className=\"sun\" src={sun} alt=\"sun\" />\r\n        <i className=\"fas fa-moon moon\"></i>\r\n\r\n        <div className=\"horizon\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Info;\r\n","import React from \"react\";\r\n\r\nconst SelectCity = (props) => {\r\n  const handleClickCitySelect = (e) => {\r\n    props.selectCity(e.target.id);\r\n  };\r\n\r\n  return (\r\n    <div className=\"select-city\">\r\n      <p className=\"hint\">Użyj geolokalizacji, albo wybierz jedno z miast:</p>\r\n\r\n      <div className=\"local-city\">\r\n        <button\r\n          className=\"local-button\"\r\n          onClick={() => props.getLocalWeather()}\r\n        >\r\n          <i class=\"fas fa-search-location\"></i>\r\n        </button>\r\n      </div>\r\n      <div className=\"cities-table\">\r\n        <div\r\n          className=\"city\"\r\n          onClick={(e) => handleClickCitySelect(e)}\r\n          id=\"Kraków\"\r\n        >\r\n          Kraków\r\n        </div>\r\n        <div\r\n          className=\"city\"\r\n          onClick={(e) => handleClickCitySelect(e)}\r\n          id=\"Warszawa\"\r\n        >\r\n          Warszawa\r\n        </div>\r\n        <div\r\n          className=\"city\"\r\n          onClick={(e) => handleClickCitySelect(e)}\r\n          id=\"Rzeszów\"\r\n        >\r\n          Rzeszów\r\n        </div>\r\n        <div\r\n          className=\"city\"\r\n          onClick={(e) => handleClickCitySelect(e)}\r\n          id=\"Gdańsk\"\r\n        >\r\n          Gdańsk\r\n        </div>\r\n        <div\r\n          className=\"city\"\r\n          onClick={(e) => handleClickCitySelect(e)}\r\n          id=\"Wrocław\"\r\n        >\r\n          Wrocław\r\n        </div>\r\n        <div\r\n          className=\"city\"\r\n          onClick={(e) => handleClickCitySelect(e)}\r\n          id=\"Poznań\"\r\n        >\r\n          Poznań\r\n        </div>\r\n        <div\r\n          className=\"city\"\r\n          onClick={(e) => handleClickCitySelect(e)}\r\n          id=\"Lublin\"\r\n        >\r\n          Lublin\r\n        </div>\r\n        <div\r\n          className=\"city\"\r\n          onClick={(e) => handleClickCitySelect(e)}\r\n          id=\"Łódź\"\r\n        >\r\n          Łódź\r\n        </div>\r\n        <div\r\n          className=\"city\"\r\n          onClick={(e) => handleClickCitySelect(e)}\r\n          id=\"Katowice\"\r\n        >\r\n          Katowice\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelectCity;\r\n","import React from \"react\";\r\nimport \"./css/style.css\";\r\nimport { setInterval } from \"timers\";\r\nimport Forecast from \"./components/Forecast\";\r\nimport Info from \"./components/Info\";\r\nimport SelectCity from \"./components/SelectCity\";\r\n//key\r\nconst APIKey = \"efa2ef11f117f7485b2fca8e87a3a2f5\";\r\nclass App extends React.Component {\r\n  state = {\r\n    data: new Date(),\r\n    hour: null,\r\n    day: null,\r\n    sunrise: 0,\r\n    sunset: 0,\r\n    city: \"Kraków\",\r\n    forecast: null,\r\n    lon: 19.57,\r\n    lat: 50.03,\r\n    currentTime: null,\r\n    cityPending: null,\r\n  };\r\n\r\n  onClickSelectCity = (city) => {\r\n    let lat;\r\n    let lon;\r\n    const infoWrapper = document.querySelector(\".info-wrapper\");\r\n    const forecastWrapper = document.querySelector(\".forecast-container\");\r\n    switch (city) {\r\n      case \"Kraków\":\r\n        lat = 50.03;\r\n        lon = 19.57;\r\n        break;\r\n      case \"Warszawa\":\r\n        lat = 52.12;\r\n        lon = 21.02;\r\n        break;\r\n      case \"Rzeszów\":\r\n        lat = 50;\r\n        lon = 22;\r\n        break;\r\n      case \"Poznań\":\r\n        lat = 52.25;\r\n        lon = 16.55;\r\n        break;\r\n      case \"Wrocław\":\r\n        lat = 51.07;\r\n        lon = 17.02;\r\n        break;\r\n      case \"Gdańsk\":\r\n        lat = 54.22;\r\n        lon = 18.38;\r\n        break;\r\n      case \"Łódź\":\r\n        lat = 51.47;\r\n        lon = 19.28;\r\n        break;\r\n      case \"Katowice\":\r\n        lat = 50;\r\n        lon = 19.01;\r\n        break;\r\n      case \"Lublin\":\r\n        lat = 51.14;\r\n        lon = 22.34;\r\n        break;\r\n      default:\r\n        console.log(\"coś nie działa\");\r\n    }\r\n    this.setState({\r\n      cityPending: city,\r\n      lat: lat,\r\n      lon: lon,\r\n    });\r\n\r\n    infoWrapper.classList.add(\"hide\");\r\n    forecastWrapper.classList.add(\"hide\");\r\n  };\r\n\r\n  //get forecast\r\n  getWeather = (lon = 19.57, lat = 50.03) => {\r\n    const API = `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&exclude=hourly,minutely&appid=${APIKey}&units=metric&lang=pl`;\r\n    const infoWrapper = document.querySelector(\".info-wrapper\");\r\n    const forecastWrapper = document.querySelector(\".forecast-container\");\r\n\r\n    fetch(API)\r\n      .then((response) => {\r\n        if (response.ok) {\r\n          return response;\r\n        }\r\n        throw Error(\"Nie udało się pobrać danych!\");\r\n      })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        infoWrapper.classList.remove(\"hide\");\r\n        forecastWrapper.classList.remove(\"hide\");\r\n\r\n        this.setState({\r\n          forecast: data,\r\n          currentTime: data.current.dt,\r\n          sunset: data.current.sunset,\r\n          sunrise: data.current.sunrise,\r\n        });\r\n      });\r\n  };\r\n\r\n  getGeolocation = (pos) => {\r\n    const lat = pos.coords.latitude;\r\n    const lon = pos.coords.longitude;\r\n    const infoWrapper = document.querySelector(\".info-wrapper\");\r\n    const forecastWrapper = document.querySelector(\".forecast-container\");\r\n\r\n    this.setState({\r\n      lat: lat,\r\n      lon: lon,\r\n      cityPending: \"u Ciebie :)\",\r\n    });\r\n    infoWrapper.classList.add(\"hide\");\r\n    forecastWrapper.classList.add(\"hide\");\r\n  };\r\n\r\n  getLocalWeather = () => {\r\n    navigator.geolocation.getCurrentPosition(this.getGeolocation);\r\n  };\r\n  getCurrentTime = () => {\r\n    this.setState({\r\n      hour: new Date().toLocaleTimeString(),\r\n    });\r\n  };\r\n\r\n  getCurrentDay = () => {\r\n    const days = [\r\n      \"Niedziela\",\r\n      \"Poniedziałek\",\r\n      \"Wtorek\",\r\n      \"Środa\",\r\n      \"Czwartek\",\r\n      \"Piątek\",\r\n      \"Sobota\",\r\n    ];\r\n    const day = this.state.data.getDay();\r\n    this.setState({\r\n      day: days[day],\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    const infoSelector = document.querySelector(\".info-wrapper\");\r\n\r\n    this.getCurrentDay();\r\n    setInterval(this.getCurrentTime, 1000);\r\n    this.getWeather();\r\n\r\n    infoSelector.addEventListener(\"transitionend\", () => {\r\n      this.getWeather(this.state.lon, this.state.lat);\r\n      this.setState({\r\n        city: this.state.cityPending,\r\n      });\r\n    });\r\n  }\r\n\r\n  calculateSunPosition = () => {\r\n    //selectors\r\n    const sunContainer = document.querySelector(\".sun-container\");\r\n    const sun = document.querySelector(\".sun\");\r\n    const horizon = document.querySelector(\".horizon\");\r\n    const moon = document.querySelector(\".moon\");\r\n    //values\r\n    const dayLength = (this.state.sunset - this.state.sunrise) / 3600;\r\n    const currentTime = (this.state.currentTime - this.state.sunrise) / 3600;\r\n    const sunPositionX = (currentTime / dayLength) * sunContainer.clientWidth;\r\n    const sunPositionY =\r\n      ((-4 * sunContainer.clientHeight) /\r\n        (sunContainer.clientWidth * sunContainer.clientWidth)) *\r\n      sunPositionX *\r\n      (sunPositionX - sunContainer.clientWidth);\r\n    //final sun position\r\n    const finalX = Math.floor(sunPositionX);\r\n    const finalY = sunContainer.clientHeight - Math.floor(sunPositionY);\r\n\r\n    //check whether its day or night:\r\n    if (\r\n      finalX < sunContainer.clientWidth &&\r\n      finalY < sunContainer.clientHeight\r\n    ) {\r\n      //if its day- display bright sky and sun\r\n      sun.style.left = `${finalX}px`;\r\n      sun.style.top = `${finalY}px`;\r\n      moon.style.display = \"none\";\r\n      sun.style.display = \"unset\";\r\n      sunContainer.style.backgroundColor = \"rgb(202, 226, 247)\";\r\n      horizon.style.backgroundColor = \"rgb(123, 201, 134)\";\r\n    } else {\r\n      //in the night display dark sky and moon\r\n      sun.style.display = \"none\";\r\n      moon.style.display = \"unset\";\r\n\r\n      sunContainer.style.backgroundColor = \"rgba(104, 144, 245, 1)\";\r\n      horizon.style.backgroundColor = \"rgba(209, 218, 241, 1)\";\r\n    }\r\n  };\r\n\r\n  componentDidUpdate() {\r\n    this.calculateSunPosition();\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Info\r\n          city={this.state.city}\r\n          day={this.state.day}\r\n          hour={this.state.hour}\r\n          sunset={this.state.sunset}\r\n          sunrise={this.state.sunrise}\r\n        />\r\n        <SelectCity\r\n          selectCity={this.onClickSelectCity}\r\n          getLocalWeather={this.getLocalWeather}\r\n        ></SelectCity>\r\n        <Forecast\r\n          getWeather={this.getWeather}\r\n          forecast={this.state.forecast}\r\n          city={this.state.city}\r\n          hide={this.onClickHide}\r\n          day={this.state.day}\r\n          sunset={this.state.sunset}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n","module.exports = __webpack_public_path__ + \"static/media/sun.e2600015.svg\";"],"sourceRoot":""}